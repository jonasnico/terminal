---
interface Props {
  src?: string;
  href?: string;
  target?: string;
  style?: any;
}

const { src, style: propStyle, href, target } = Astro.props;

const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
const combinedStyle = { ...propStyle, ...backgroundStyle };

const hasChildren = Astro.slots.has("default");
---

{
  hasChildren ? (
    <div class="avatar-parent">
      {href ? (
        <a
          class:list={["avatar-root", { "avatar-placeholder": !src }]}
          style={combinedStyle}
          href={href}
          target={target}
          tabindex="0"
          role="link"
        />
      ) : (
        <figure
          class:list={["avatar-root", { "avatar-placeholder": !src }]}
          style={combinedStyle}
        />
      )}
      <span class="avatar-right">
        <slot />
      </span>
    </div>
  ) : href ? (
    <a
      class:list={["avatar-root", { "avatar-placeholder": !src }]}
      style={combinedStyle}
      href={href}
      target={target}
      tabindex="0"
      role="link"
    />
  ) : (
    <figure
      class:list={["avatar-root", { "avatar-placeholder": !src }]}
      style={combinedStyle}
    />
  )
}

<style lang="scss">
  .avatar-parent {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
  }

  .avatar-placeholder {
    background: var(--theme-border);
    display: inline-block;
    width: 4ch;
    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
    vertical-align: bottom;
    flex-shrink: 0;
    position: relative;

    &:hover {
      &::before {
        content: "";
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        position: absolute;
        pointer-events: none;
        opacity: 0.5;
        background: var(--theme-focused-foreground);
      }
    }
  }

  .avatar-root {
    background: unset;
    background-size: cover;
    background-position: 50% 50%;
    background-repeat: no-repeat;
    display: inline-block;
    width: 4ch;
    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
    vertical-align: bottom;
    flex-shrink: 0;
    position: relative;

    &:hover {
      background: unset;
      background-size: cover;
      background-position: 50% 50%;
      background-repeat: no-repeat;
      &::before {
        content: "";
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        position: absolute;
        pointer-events: none;
        opacity: 0.5;
        background: var(--theme-focused-foreground);
      }
    }
  }

  a {
    &.avatar-root {
      background: unset;
      background-size: cover;
      background-position: 50% 50%;
      background-repeat: no-repeat;
      display: inline-block;
      width: 4ch;
      height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
      vertical-align: bottom;
      flex-shrink: 0;
      position: relative;

      &:hover {
        background: unset;
        background-size: cover;
        background-position: 50% 50%;
        background-repeat: no-repeat;
        &::before {
          content: "";
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          position: absolute;
          pointer-events: none;
          opacity: 0.5;
          background: var(--theme-focused-foreground);
        }
      }

      &:focus {
        background: unset;
        background-size: cover;
        background-position: 50% 50%;
        background-repeat: no-repeat;
        outline: 0;

        &::before {
          content: "";
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          position: absolute;
          pointer-events: none;
          opacity: 0.5;
          background: var(--theme-focused-foreground);
        }
      }
    }
  }

  .avatar-right {
    min-width: 10%;
    width: 100%;
    background: var(--theme-foreground);
  }
</style>
